[Enum]
interface Network {
    CryptoOrgMainnet();
    CryptoOrgTestnet();
    CronosMainnet();
    CosmosHub();
    Other(string chain_id, u32 coin_type, string bech32hrp);
};

[Enum]
interface WalletCoin {
    CosmosSDK(Network network);
    Ethereum(EthNetwork network);
};

interface WalletCoinFunc {
    constructor(WalletCoin coin);

    [Throws=HdWrapError]
    string derive_address([ByRef] SecretKey private_key);

    u32 get_coin_type();
    EthNetwork get_eth_network();
};

enum MnemonicWordCount {
  "Twelve",
  "Eighteen",
  "TwentyFour",
};

[Error]
enum SecretKeyWrapError {
    "InvalidBytes",
    "InvalidHex",
};

interface SecretKey {
    constructor();

    [Throws=SecretKeyWrapError,Name=from_bytes]
    constructor(sequence<u8> bytes);

    [Throws=SecretKeyWrapError,Name=from_hex]
    constructor(string hex);

    sequence<u8> get_public_key_bytes();
    string get_public_key_hex();
    sequence<u8> to_bytes();
    string to_hex();

    [Throws=HdWrapError]
    string to_address(WalletCoin coin);
};

[Error]
enum HdWrapError {
    "InvalidLength",
    "HDError",
    "AccountId",
};

interface HDWallet {
    [Throws=HdWrapError]
    constructor(sequence<u8> seed_val);

    [Throws=HdWrapError,Name=recover_wallet]
    constructor(string mnemonic_phrase, string? password);

    [Throws=HdWrapError,Name=generate_wallet]
    constructor(string? password, MnemonicWordCount? word_count);

    string? get_backup_mnemonic_phrase();

    [Throws=HdWrapError]
    string get_default_address(WalletCoin coin);

    [Throws=HdWrapError]
    string get_address(WalletCoin coin, u32 index);

    [Throws=HdWrapError]
    SecretKey get_key(string derivation_path);

    [Throws=HdWrapError]
    SecretKey get_key_from_index(WalletCoin coin, u32 index);
};

[Enum]
interface SingleCoin {
  BaseCRO(u64 amount);
  CRO(u64 amount, Network network);
  TestnetBaseCRO(u64 amount);
  TestnetCRO(u64 amount);
  UATOM(u64 amount);
  ATOM(u64 amount);
  Other(string amount, string denom);
};

[Custom]
typedef sequence<u8> PublicKeyBytesWrapper;

[Error]
enum PublicKeyBytesError {
    "InvalidLength",
};

dictionary CosmosSDKTxInfo {
    u64 account_number;
    u64 sequence_number;
    u64 gas_limit;
    SingleCoin fee_amount;
    u32 timeout_height;
    string? memo_note;
    Network network;
};

dictionary EthTxInfo {
    string to_address;
    EthAmount amount;
    string nonce;
    string gas_limit;
    EthAmount gas_price;
    sequence<u8>? data;
    boolean legacy_tx;
};


dictionary Height {
    u64 revision_number;
    u64 revision_height;
};

[Enum]
interface CosmosSDKMsg {
  BankSend(string recipient_address, SingleCoin amount);
  NftIssueDenom(string id, string name, string schema);
  NftMint(string id, string denom_id, string name, string uri, string data, string recipient);
  NftEdit(string id, string denom_id, string name, string uri, string data);
  NftTransfer(string id, string denom_id, string recipient);
  NftBurn(string id, string denom_id);
  StakingDelegate(string validator_address, SingleCoin amount);
  StakingUndelegate(string validator_address, SingleCoin amount);
  StakingBeginRedelegate(string validator_src_address, string validator_dst_address, SingleCoin amount);
  DistributionSetWithdrawAddress(string withdraw_address);
  DistributionWithdrawDelegatorReward(string validator_address);
  IbcTransfer(string receiver, string source_port, string source_channel, SingleCoin token, Height timeout_height, u64 timeout_timestamp);
  ExecuteContract(string contract, sequence<u8> execute_msg, SingleCoin coins);
  Raw(CosmosRawMsg raw_msg);
};

[Enum]
interface CosmosRawMsg {
  Normal(CosmosRawNormalMsg msg);
  CryptoOrg(CosmosRawCryptoOrgMsg msg);
  Any(string type_url, sequence<u8> value);
};

[Enum]
interface CosmosRawNormalMsg {
  BankSend(string from_address, string to_address, sequence<SingleCoin> amount);
  StakingBeginRedelegate(string delegator_address, string validator_src_address, string validator_dst_address, SingleCoin amount);
  StakingDelegate(string delegator_address, string validator_address, SingleCoin amount);
  StakingUndelegate(string delegator_address, string validator_address, SingleCoin amount);
  DistributionSetWithdrawAddress(string delegator_address, string withdraw_address);
  DistributionWithdrawDelegatorReward(string delegator_address, string validator_address);
  IbcTransfer(string sender, string receiver, string source_port, string source_channel, SingleCoin token, Height timeout_height, u64 timeout_timestamp);
};

[Enum]
interface CosmosRawCryptoOrgMsg {
  NftIssueDenom(string id, string name, string schema, string sender);
  NftMint(string id, string denom_id, string name, string uri, string data, string sender, string recipient);
  NftEdit(string id, string denom_id, string name, string uri, string data, string sender);
  NftTransfer(string id, string denom_id, string sender, string recipient);
  NftBurn(string id, string denom_id, string sender);
};

[Error]
enum CosmosError {
  "EyreReport",
  "PubkeyError",
};

[Error]
enum RestError {
  "RequestError",
  "MissingResult",
  "AsyncRuntimeError",
  "GRPCTransportError",
  "GRPCError",
  "ErrorReport",
};

dictionary RawRpcBalance {
    string denom;
    string amount;
};

dictionary RawRpcPubKey {
    string pub_key_type;
    string key;
};

dictionary RawRpcAccountStatus {
    string account_type;
    string address;
    RawRpcPubKey? pub_key;
    u64 account_number;
    u64 sequence;
};

[Enum]
interface RawRpcAccountResponse {
  OkResponse(RawRpcAccountStatus account);
  ErrorResponse(i64 code, string message, sequence<string> details);
};

enum BalanceApiVersion {
  "Old",
  "New",
};

dictionary TxBroadcastResult {
    string tx_hash_hex;
    u32 code;
    string log;
};

[Enum]
interface TxBroadcastMode {
    Sync();
    Async();
    Commit();
};

dictionary DenomMetadata {
    string base;
    string name;
    string description;
    string display;
    string symbol;
    string denom_units;
};

interface CosmosSDKClient {
    constructor(string tendermint_rpc_url, string rest_api_url, BalanceApiVersion balance_api_version, string grpc_url);

    [Throws=RestError]
    TxBroadcastResult broadcast_tx(sequence<u8> raw_signed_tx, TxBroadcastMode? mode);

    [Throws=RestError]
    RawRpcBalance get_account_balance([ByRef] string address, [ByRef] string denom);

    [Throws=RestError]
    RawRpcAccountResponse get_account_details([ByRef] string address);

    [Throws=RestError]
    DenomMetadata get_denom_metadata([ByRef] string denom);

    [Throws=RestError]
    u64 simulate(sequence<u8> raw_signed_tx);
};

dictionary CosmosAny {
    string type_url;
    string value;
};

dictionary CosmosAuthInfo {
    CosmosFee fee;
    sequence<CosmosSignerInfo> signer_infos;
};

dictionary CosmosFee {
    sequence<SingleCoin> amount;
    u64 gas_limit;
    string? payer;
    string? granter;
};

dictionary CosmosLegacyAminoMultisig {
    u32 threshold;
    sequence<CosmosAny> public_keys;
};

[Enum]
interface CosmosModeInfo {
    Single(string mode);
    Multi(sequence<string> modes);
};

dictionary CosmosSignerInfo {
    CosmosSignerPublicKey? public_key;
    CosmosModeInfo mode_info;
    u64 sequence;
};

[Enum]
interface CosmosSignerPublicKey {
    Single(CosmosAny key);
    LegacyAminoMultisig(CosmosLegacyAminoMultisig key);
    Any(CosmosAny key);
};

dictionary CosmosTxBody {
    sequence<CosmosRawMsg> messages;
    string memo;
    u64 timeout_height;
    sequence<CosmosAny> extension_options;
    sequence<CosmosAny> non_critical_extension_options;
};

interface CosmosParserWrapper {
    [Name=new_base_parser]
    constructor();
    [Name=new_crypto_org_parser]
    constructor();
    [Name=new_luna_classic_parser]
    constructor();
    [Throws=CosmosError]
    CosmosFee parse_proto_json_fee([ByRef] string json_string);
    [Throws=CosmosError]
    CosmosRawMsg parse_proto_json_msg([ByRef] string json_string);
    [Throws=CosmosError]
    CosmosAuthInfo parse_protobuf_auto_info([ByRef] string hex_string);
    [Throws=CosmosError]
    CosmosTxBody parse_protobuf_tx_body([ByRef] string hex_string);
};

[Enum]
interface ContractApproval {
  Erc20(string contract_address, string approved_address, string amount);
  Erc721Approve(string contract_address, string approved_address, string token_id);
  Erc721SetApprovalForAll(string contract_address, string approved_address, boolean approved);
  Erc1155(string contract_address, string approved_address, boolean approved);
};

[Enum]
interface ContractBalance {
  Erc20(string contract_address);
  Erc721(string contract_address);
  Erc1155(string contract_address, string token_id);
};

[Enum]
interface ContractTransfer {
  Erc20Transfer(string contract_address, string to_address, string amount);
  Erc20TransferFrom(string contract_address, string from_address, string to_address, string amount);
  Erc721TransferFrom(string contract_address, string from_address, string to_address, string token_id);
  Erc721SafeTransferFrom(string contract_address, string from_address, string to_address, string token_id);
  Erc721SafeTransferFromWithAdditionalData(string contract_address, string from_address, string to_address, string token_id, sequence<u8> additional_data);
  Erc1155SafeTransferFrom(string contract_address, string from_address, string to_address, string token_id, string amount, sequence<u8> additional_data);
};

[Enum]
interface ContractBatchTransfer {
  Erc1155(string contract_address, string from_address, string to_address, sequence<string> token_ids, sequence<string> amounts, sequence<u8> additional_data);
};

dictionary Denom {
    string id;
    string name;
    string schema;
    string creator;
};

dictionary BaseNft {
    string id;
    string name;
    string uri;
    string data;
    string owner;
};


dictionary Owner {
    string address;
    sequence<IdCollection> id_collections;
};

dictionary IdCollection {
    string denom_id;
    sequence<string> token_ids;
};

dictionary Collection {
    Denom? denom;
    sequence<BaseNft> nfts;
};

dictionary PageRequest {
    sequence<u8> key;
    u64 offset;
    u64 limit;
    boolean count_total;
    boolean reverse;
};

[Error]
enum EthError {
  "Overflow",
  "HdWrapError",
  "HexConversion",
  "StrRadixConversion",
  "DecConversion",
  "ParseError",
  "NodeUrl",
  "SendTxFail",
  "BroadcastTxFail",
  "MempoolDrop",
  "BalanceFail",
  "AsyncRuntimeError",
  "ContractSendError",
  "ContractCallError",
  "SignatureError",
  "ChainidError",
  "AbiError",
  "Eip712Error",
  "JsonError",
  "ClientError",
};

[Enum]
interface EthAbiTokenBind {
  Address(string data);
  FixedBytes(sequence<u8> data);
  Bytes(sequence<u8> data);
  Int(string data);
  Uint(string data);
  Bool(boolean data);
  Str(string data);
  FixedArray(sequence<EthAbiTokenBind> data);
  Array(sequence<EthAbiTokenBind> data);
  Tuple(sequence<EthAbiTokenBind> data);
};

interface EthAbiContract {
  [Throws=EthError]
  constructor([ByRef] string abi);

  [Throws=EthError]
  sequence<u8> encode_bind([ByRef] string function_name, sequence<EthAbiTokenBind> tokens);
};

interface CosmosSigner {
    constructor(SecretKey secret_key);

    [Throws=CosmosError]
    string sign_direct([ByRef] string chain_id, [ByRef] string account_number, [ByRef] string auth_info_bytes, [ByRef] string body_bytes);
};

interface EthSigner {
    constructor(SecretKey secret_key);

    [Throws=EthError]
    string eth_sign_insecure([ByRef] string hash);

    string personal_sign([ByRef] string message);

    [Throws=EthError]
    string sign_typed_data([ByRef] string json_typed_data);
};

[Enum]
interface EthAmount {
    WeiDecimal(string amount);
    GweiDecimal(string amount);
    EthDecimal(string amount);
};

[Enum]
 interface EthNetwork {
     Mainnet();
     BSC();
     Cronos();
     Polygon();
     Known(string name);
     Custom(u64 chain_id, boolean legacy);
 };


dictionary TransactionReceipt {
    sequence<u8> transaction_hash;
    string transaction_index;
    sequence<u8> block_hash;
    string block_number;
    string cumulative_gas_used;
    string gas_used;
    string contract_address;
    sequence<string> logs;
    string status;
    sequence<u8> root;
    sequence<u8> logs_bloom;
    string transaction_type;
    string effective_gas_price;
};

interface Client {
    [Throws=RestError,Name=new_blocking]
    constructor(string grpc_web_url);

    [Throws=RestError]
    u64 supply_blocking(string denom_id, string owner);

    [Throws=RestError]
    Owner? owner_blocking(string denom_id, string owner, PageRequest? pagination);

    [Throws=RestError]
    Collection? collection_blocking(string denom_id, PageRequest? pagination);

    [Throws=RestError]
    Denom? denom_blocking(string denom_id);

    [Throws=RestError]
    Denom? denom_by_name_blocking(string denom_name);

    [Throws=RestError]
    sequence<Denom> denoms_blocking(PageRequest? pagination);

    [Throws=RestError]
    BaseNft? nft_blocking(string denom_id, string token_id);
};

namespace common {
  [Throws=CosmosError]
  sequence<u8> get_single_msg_sign_payload(CosmosSDKTxInfo tx_info, CosmosSDKMsg msg, PublicKeyBytesWrapper sender_pubkey);
  [Throws=CosmosError]
  sequence<u8> build_signed_single_msg_tx(CosmosSDKTxInfo tx_info, CosmosSDKMsg msg, SecretKey secret_key);
  [Throws=CosmosError]
  sequence<u8> get_msg_sign_payload(CosmosSDKTxInfo tx_info, sequence<CosmosSDKMsg> msgs, PublicKeyBytesWrapper sender_pubkey);
  [Throws=CosmosError]
  sequence<u8> build_signed_msg_tx(CosmosSDKTxInfo tx_info, sequence<CosmosSDKMsg> msgs, SecretKey secret_key);
  [Throws=CosmosError]
  sequence<u8> get_nft_issue_denom_signed_tx(CosmosSDKTxInfo tx_info, SecretKey secret_key, string id, string name, string schema);
  [Throws=CosmosError]
  sequence<u8> get_nft_mint_signed_tx(CosmosSDKTxInfo tx_info, SecretKey secret_key, string id, string denom_id, string name, string uri, string data, string recipient);
  [Throws=CosmosError]
  sequence<u8> get_nft_edit_signed_tx(CosmosSDKTxInfo tx_info, SecretKey secret_key, string id, string denom_id, string name, string uri, string data);
  [Throws=CosmosError]
  sequence<u8> get_nft_transfer_signed_tx(CosmosSDKTxInfo tx_info, SecretKey secret_key, string id, string denom_id, string recipient);
  [Throws=CosmosError]
  sequence<u8> get_nft_burn_signed_tx(CosmosSDKTxInfo tx_info, SecretKey secret_key, string id, string denom_id);
  [Throws=RestError]
  RawRpcAccountResponse get_account_details_blocking([ByRef] string api_url, [ByRef] string address);
  [Throws=RestError]
  RawRpcBalance get_account_balance_blocking([ByRef] string api_url, [ByRef] string address, [ByRef] string denom, BalanceApiVersion version);
  [Throws=RestError]
  u64 simulate_blocking([ByRef] string grpc_url, sequence<u8> raw_signed_tx);
  [Throws=RestError]
  TxBroadcastResult broadcast_tx_sync_blocking([ByRef] string tendermint_rpc_url, sequence<u8> raw_signed_tx);
  [Throws=EthError]
  sequence<u8> construct_unsigned_eth_tx([ByRef] string from_hex, [ByRef] string to_hex, EthAmount amount, EthNetwork network, boolean legacy_tx);
  [Throws=EthError]
  sequence<u8> build_signed_eth_tx(EthTxInfo tx_info, EthNetwork network, SecretKey secret_key);
  [Throws=EthError]
  string get_eth_balance_blocking([ByRef] string address, [ByRef] string web3api_url);
  [Throws=EthError]
  string get_contract_balance_blocking([ByRef] string account_address, ContractBalance contract_details, [ByRef] string web3api_url);
  [Throws=EthError]
  TransactionReceipt broadcast_eth_signed_raw_tx_blocking(sequence<u8> raw_tx, [ByRef] string web3api_url, u64 polling_interval_ms);
  [Throws=EthError]
  TransactionReceipt broadcast_sign_eth_tx_blocking([ByRef] string to_hex, EthAmount amount, EthNetwork network, SecretKey secret_key, [ByRef] string web3api_url, u64 polling_interval_ms);
  [Throws=EthError]
  TransactionReceipt broadcast_contract_approval_tx_blocking(ContractApproval approval_details, EthNetwork network, SecretKey secret_key, [ByRef] string web3api_url, u64 polling_interval_ms);
  [Throws=EthError]
  TransactionReceipt broadcast_contract_transfer_tx_blocking(ContractTransfer transfer_details, EthNetwork network, SecretKey secret_key, [ByRef] string web3api_url, u64 polling_interval_ms);
  [Throws=EthError]
  TransactionReceipt broadcast_contract_batch_transfer_tx_blocking(ContractBatchTransfer batch_transfer_details, EthNetwork network, SecretKey secret_key, [ByRef] string web3api_url, u64 polling_interval_ms);
  string bytes_to_hex(sequence<u8> data);
  [Throws=EthError]
  sequence<u8> eth_sign_transaction([ByRef] string json_str, SecretKey secret_key);
  [Throws=EthError]
  sequence<u8> eth_sign_transaction_with_chainid([ByRef] string json_str, SecretKey secret_key, u64 chain_id);
};
